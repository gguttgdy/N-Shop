name: E-commerce Fullstack CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Generate JWT Secret
      working-directory: ./backend
      run: |
        echo "JWT_SECRET=$(openssl rand -base64 64)" >> $GITHUB_ENV

    - name: Run unit tests
      working-directory: ./backend
      run: mvn clean test -Dspring.profiles.active=test
      env:
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb
        JWT_SECRET: ${{ env.JWT_SECRET }}

    - name: Run integration tests
      working-directory: ./backend
      run: mvn verify -Dspring.profiles.active=test
      env:
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb
        JWT_SECRET: ${{ env.JWT_SECRET }}

    - name: Generate code coverage report
      working-directory: ./backend
      run: mvn jacoco:report

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage

    - name: Run security scan with OWASP Dependency Check
      working-directory: ./backend
      run: mvn org.owasp:dependency-check-maven:check

    - name: Upload OWASP report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: owasp-dependency-check-report
        path: ./backend/target/dependency-check-report.html

    - name: Build JAR
      working-directory: ./backend
      run: mvn clean package -DskipTests
      env:
        JWT_SECRET: ${{ env.JWT_SECRET }}

    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: ./backend/target/*.jar

  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint || true  # Continue on linting errors for now

    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build/

  sonarqube:
    name: SonarQube Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Generate JWT Secret
      working-directory: ./backend
      run: |
        echo "JWT_SECRET=$(openssl rand -base64 64)" >> $GITHUB_ENV

    - name: Run tests and SonarQube analysis
      working-directory: ./backend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        JWT_SECRET: ${{ env.JWT_SECRET }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=ecommerce-fullstack-backend \
          -Dsonar.organization=your-org \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=$SONAR_TOKEN \
          -Dspring.profiles.active=test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, sonarqube]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: ./backend/target/

    - name: Download frontend artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/Dockerfile.backend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./docker/Dockerfile.frontend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, using docker-compose or kubectl

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example, using docker-compose or kubectl

  notification:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        # Add notification logic here (Slack, Discord, email, etc.)
