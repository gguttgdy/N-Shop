import React, { useState } from 'react';
import './HelpCenter.css';

const HelpCenter = ({ language }) => {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    category: '',
    message: '',
    consent: false
  });

  const translations = {
    ru: {
      title: '–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏',
      subtitle: '–ß–µ–º –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å?',
      faq: '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
      orders: '–ó–∞–∫–∞–∑—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞',
      products: '–¢–æ–≤–∞—Ä—ã',
      insurance: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
      complaints: '–ñ–∞–ª–æ–±—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã',
      contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–∞–ª–æ–Ω—ã',
      other: '–î—Ä—É–≥–æ–µ',
      techSupport: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      sendQuery: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å',
      respondQuickly: '–ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ',
      fullName: '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è',
      email: 'E-mail',
      phone: '–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
      messageCategory: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è',
      consent: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      sendMessage: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
    },
    en: {
      title: 'Help Center',
      subtitle: 'How can we help you?',
      faq: 'Frequently Asked Questions',
      orders: 'Orders and delivery',
      products: 'Products',
      insurance: 'Insurance',
      complaints: 'Complaints and returns',
      contact: 'Contact and stores',
      other: 'Other',
      techSupport: 'Technical support',
      sendQuery: 'Send us your query',
      respondQuickly: 'We will respond as quickly as possible',
      fullName: 'Full name',
      email: 'E-mail',
      phone: 'Phone (optional)',
      messageCategory: 'Message category',
      consent: 'I agree to the processing of my personal data',
      sendMessage: 'Send message'
    },
    pl: {
      title: 'Centrum pomocy',
      subtitle: 'W czym mo≈ºemy Ci pom√≥c?',
      faq: 'Najczƒô≈õciej zadawane',
      orders: 'Zam√≥wienia i dostawa',
      products: 'Produkty',
      insurance: 'Ubezpieczenia',
      complaints: 'Reklamacje i zwroty',
      contact: 'Kontakt i salony',
      other: 'Inne',
      techSupport: 'Pomoc techniczna',
      sendQuery: 'Wy≈õlij nam swoje zapytanie',
      respondQuickly: 'Odpowiemy najszybciej jak to mo≈ºliwe',
      fullName: 'Imiƒô i nazwisko',
      email: 'E-mail',
      phone: 'Telefon (opcjonalnie)',
      messageCategory: 'Kategoria wiadomo≈õci',
      consent: 'Zgadzam siƒô na przetwarzanie moich danych osobowych przez x‚Äëkom sp. z o.o., z siedzibƒÖ w Czƒôstochowie ul. Bojemskiego 25, w celu odpowiedzi na mojƒÖ wiadomo≈õƒá, drogƒÖ telefonicznƒÖ lub poprzez e‚Äëmail.*',
      sendMessage: 'Wy≈õlij wiadomo≈õƒá'
    }
  };

  const t = translations[language];

  const categories = [
    { id: 'faq', icon: '‚ùì', name: t.faq },
    { id: 'orders', icon: 'üì¶', name: t.orders },
    { id: 'products', icon: 'üõçÔ∏è', name: t.products },
    { id: 'insurance', icon: 'üõ°Ô∏è', name: t.insurance },
    { id: 'complaints', icon: '‚Ü©Ô∏è', name: t.complaints },
    { id: 'contact', icon: 'üìû', name: t.contact },
    { id: 'other', icon: 'üí¨', name: t.other },
    { id: 'tech', icon: 'üîß', name: t.techSupport }
  ];

  const faqQuestions = {
    pl: [
      'Jak mo≈ºesz oddaƒá zu≈ºyty sprzƒôt elektryczny i elektroniczny, kt√≥ry by≈Ç u≈ºywany w gospodarstwie domowym?',
      'Jak mogƒô sprawdziƒá status mojego zam√≥wienia?',
      'Gdzie znajdƒô fakturƒô?',
      'Na mojej fakturze jest b≈ÇƒÖd, jak mogƒô to poprawiƒá?',
      'Czy wybrany przeze mnie towar jest dostƒôpny?',
      'W jakim zakresie jest mo≈ºliwa modyfikacja sprzƒôtu przed zakupem?',
      'Jak mogƒô ubezpieczyƒá towar?',
      'W jaki spos√≥b mogƒô zg≈Çosiƒá awariƒô sprzƒôtu?',
      'W jaki spos√≥b mogƒô zg≈Çosiƒá chƒôƒá zwrotu towaru?',
      'Co jest niezbƒôdne do reklamacji?',
      'Jak mogƒô sprawdziƒá status mojego zg≈Çoszenia reklamacyjnego?',
      'Otrzyma≈Çem z serwisu dokument stwierdzajƒÖcy nienaprawialno≈õƒá sprzƒôtu (NLA) ‚Äì co dalej?',
      'Do kt√≥rej czynny jest wybrany salon x-kom?'
    ],
    ru: [
      '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É?',
      '–ö–∞–∫ —è –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?',
      '–ì–¥–µ –Ω–∞–π—Ç–∏ —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É?',
      '–í –º–æ–µ–º —Å—á–µ—Ç–µ –æ—à–∏–±–∫–∞, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?',
      '–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?',
      '–í–æ–∑–º–æ–∂–Ω–∞ –ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π?',
      '–ö–∞–∫ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä?',
      '–ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ?',
      '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞?',
      '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏?',
      '–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏?',
      '–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç –æ –Ω–µ—Ä–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ ‚Äì —á—Ç–æ –¥–∞–ª—å—à–µ?',
      '–î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∞–ª–æ–Ω?'
    ],
    en: [
      'How can you dispose of used electrical and electronic equipment?',
      'How can I check the status of my order?',
      'Where can I find my invoice?',
      'There is an error on my invoice, how can I correct it?',
      'Is my selected product available?',
      'Is it possible to modify equipment before purchase?',
      'How can I insure my product?',
      'How can I report equipment failure?',
      'How can I report a return request?',
      'What is needed for a complaint?',
      'How can I check the status of my complaint?',
      'I received a document stating equipment is unrepairable ‚Äì what next?',
      'What are the opening hours of the selected store?'
    ]
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  };

  return (
    <div className="help-center">
      <div className="help-container">
        <div className="help-header">
          <h1>{t.title}</h1>
          <p className="help-subtitle">{t.subtitle}</p>
        </div>

        <div className="help-categories">
          {categories.map(category => (
            <div
              key={category.id}
              className={`help-category ${selectedCategory === category.id ? 'active' : ''}`}
              onClick={() => setSelectedCategory(selectedCategory === category.id ? null : category.id)}
            >
              <span className="category-icon">{category.icon}</span>
              <span className="category-name">{category.name}</span>
            </div>
          ))}
        </div>

        {selectedCategory === 'faq' && (
          <div className="faq-section">
            <h2>{t.faq}</h2>
            <div className="faq-questions">
              {faqQuestions[language]?.map((question, index) => (
                <div key={index} className="faq-item">
                  <div className="faq-question">{question}</div>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="contact-form-section">
          <h2>{t.sendQuery}</h2>
          <p>{t.respondQuickly}</p>
          
          <form className="contact-form" onSubmit={handleSubmit}>
            <div className="form-group">
              <input
                type="text"
                name="name"
                placeholder={t.fullName}
                value={formData.name}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="form-group">
              <input
                type="email"
                name="email"
                placeholder={t.email}
                value={formData.email}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="form-group">
              <input
                type="tel"
                name="phone"
                placeholder={t.phone}
                value={formData.phone}
                onChange={handleInputChange}
              />
            </div>
            
            <div className="form-group">
              <select
                name="category"
                value={formData.category}
                onChange={handleInputChange}
                required
              >
                <option value="">{t.messageCategory}</option>
                {categories.map(cat => (
                  <option key={cat.id} value={cat.id}>{cat.name}</option>
                ))}
              </select>
            </div>
            
            <div className="form-group">
              <textarea
                name="message"
                placeholder="Wiadomo≈õƒá..."
                value={formData.message}
                onChange={handleInputChange}
                rows="5"
                required
              ></textarea>
            </div>
            
            <div className="form-group checkbox-group">
              <label>
                <input
                  type="checkbox"
                  name="consent"
                  checked={formData.consent}
                  onChange={handleInputChange}
                  required
                />
                <span className="checkbox-text">{t.consent}</span>
              </label>
            </div>
            
            <button type="submit" className="submit-btn">
              {t.sendMessage}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default HelpCenter;
